[
  {
    "title": "META-01: Project Initialization & Setup",
    "body": "Configure repository settings, permissions, branch protection rules, and ensure Khora Kernel bootstrap completed successfully. Verify CI/CD pipeline runs green.",
    "labels": ["type:meta", "sprint:0", "priority:critical"]
  },
  {
    "title": "EPIC-CORE: Core Application Scaffolding",
    "body": "Establish the basic structure for the API and Worker services, including configuration loading, logging setup, and basic health checks.",
    "labels": ["type:epic", "feature:core", "sprint:0"]
  },
  {
    "title": "STORY-CORE-01: Implement Basic API Health Check",
    "body": "As an Operator, I want an unauthenticated `/healthz` endpoint on the API service that returns a 200 OK status so I can easily verify the service is running.\n\n**Acceptance Criteria:**\n- [ ] GET `/healthz` endpoint exists.\n- [ ] Returns HTTP 200 status code.\n- [ ] Returns a simple JSON body, e.g., `{\"status\": \"ok\"}`.\n- [ ] Endpoint is implemented in the API service (`{{ paths.api_dir }}`).\n\n**⚙️ Prompt hints for AI partner:**\n- Use FastAPI framework.\n- No database connection required for this endpoint.",
    "labels": ["type:story", "feature:core", "service:api", "sprint:0"]
  },
  {
    "title": "STORY-CORE-02: Setup Structured Logging",
    "body": "As a Developer, I want logs from both API and Worker services to be emitted in JSON format so they can be easily parsed and ingested by observability tools.\n\n**Acceptance Criteria:**\n- [ ] Configure standard Python `logging` module.\n- [ ] Use a JSON formatter (e.g., `python-json-logger`).\n- [ ] Logs include timestamp, level, message, and logger name.\n- [ ] Basic log statement added to application startup in both API and Worker.\n\n**⚙️ Prompt hints for AI partner:**\n- Install `python-json-logger`.\n- Configure logging in a central place (e.g., `config.py` or `main.py`).",
    "labels": ["type:story", "feature:core", "tech-debt", "sprint:0"]
  },
  {
    "title": "STORY-DB-01: Setup Database Connection & Basic Migration",
    "body": "As a Developer, I want the API service to connect to the configured database ({{ features.database }}) and run an initial schema migration so that data persistence is possible.\n\n**Acceptance Criteria:**\n- [ ] Database connection established based on environment variables (provided by Docker Compose).\n- [ ] Choose and integrate a migration tool (e.g., Alembic for Postgres, or basic SQLAlchemy models for SQLite).\n- [ ] Create an initial migration script (e.g., creating a simple 'users' table if applicable).\n- [ ] Add instructions to README on how to run migrations.\n\n**⚙️ Prompt hints for AI partner:**\n- Use SQLAlchemy Core or ORM.\n- For Postgres, use `psycopg2-binary` or `asyncpg`.\n- For SQLite, use built-in `sqlite3` via SQLAlchemy.\n- Integrate Alembic if using Postgres.",
    "labels": ["type:story", "feature:database", "service:api", "sprint:0"]
  },
  {
    "title": "STORY-INFRA-01: Verify Docker Compose Stack",
    "body": "As a Developer, I want to verify that the Docker Compose stack initializes correctly and all services are accessible to ensure a smooth development experience.\n\n**Acceptance Criteria:**\n- [ ] `docker compose up` successfully starts all services.\n- [ ] API service is accessible on configured port.\n- [ ] Database and broker (if enabled) are accessible from API service.\n- [ ] Verify lite-mode configuration with `docker compose --profile lite up` when applicable.\n\n**⚙️ Prompt hints for AI partner:**\n- Check logs for startup errors.\n- Test connectivity between services.\n- Confirm resource utilization is reasonable.",
    "labels": ["type:story", "feature:infra", "service:api", "sprint:0"]
  },
  {
    "title": "STORY-OBS-01: Setup Basic Monitoring Dashboard",
    "body": "As an Operator, I want basic monitoring dashboards that show API health, request rates, and error rates so I can quickly diagnose issues.\n\n**Acceptance Criteria:**\n- [ ] Configure metrics collection in API service.\n- [ ] Set up Prometheus scraping for the metrics.\n- [ ] Create a simple Grafana dashboard (if observability is enabled).\n- [ ] Document how to access the dashboard.\n\n**⚙️ Prompt hints for AI partner:**\n- Use Prometheus client library.\n- Track request count, duration, and error rate at minimum.\n- Consider adding system metrics (CPU, memory).",
    "labels": ["type:story", "feature:observability", "service:api", "sprint:0"]
  }
]