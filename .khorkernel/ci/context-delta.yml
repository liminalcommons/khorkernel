# Khora Kernel - Context Delta Workflow
# Detects changes to .khora/context.yaml between PR base and head
# and comments on the PR with a summary of significant changes.
name: Context Delta Detector

on:
  pull_request:
    branches: [ main ]
    paths:
      - '.khora/context.yaml'
      - 'kg/**'

jobs:
  detect-context-changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history to compare with base branch
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml deepdiff
      
      - name: Calculate Context Differences
        id: context_diff
        run: |
          # Try to get context.yaml from both base and head
          git show origin/${{ github.base_ref }}:.khora/context.yaml > base_context.yaml || echo "{}" > base_context.yaml
          cat .khora/context.yaml > head_context.yaml || echo "{}" > head_context.yaml
          
          # Generate diff using Python script
          echo "Generating diff between context files..."
          python -c '
          import yaml
          import json
          from deepdiff import DeepDiff
          
          try:
              with open("base_context.yaml", "r") as f:
                  base = yaml.safe_load(f) or {}
              with open("head_context.yaml", "r") as f:
                  head = yaml.safe_load(f) or {}
              
              # Calculate diff
              diff = DeepDiff(base, head, ignore_order=True, verbose_level=2)
              
              # Format a meaningful summary
              if diff:
                  summary = []
                  
                  # Handle new items
                  if "dictionary_item_added" in diff:
                      summary.append("### ðŸŸ¢ Added")
                      added = []
                      for item in diff["dictionary_item_added"]:
                          path = item.replace("root", "").replace("[", "").replace("]", "").replace("\'", "")
                          path = path.strip(".")
                          added.append(f"- `{path}`")
                      summary.extend(added)
                  
                  # Handle removed items  
                  if "dictionary_item_removed" in diff:
                      summary.append("### ðŸ”´ Removed")
                      removed = []
                      for item in diff["dictionary_item_removed"]:
                          path = item.replace("root", "").replace("[", "").replace("]", "").replace("\'", "")
                          path = path.strip(".")
                          removed.append(f"- `{path}`")
                      summary.extend(removed)
                  
                  # Handle changed values
                  if "values_changed" in diff:
                      summary.append("### ðŸŸ  Changed")
                      changed = []
                      for item, change in diff["values_changed"].items():
                          path = item.replace("root", "").replace("[", "").replace("]", "").replace("\'", "")
                          path = path.strip(".")
                          old_val = str(change["old_value"])
                          new_val = str(change["new_value"])
                          if len(old_val) > 50:
                              old_val = old_val[:47] + "..."
                          if len(new_val) > 50:
                              new_val = new_val[:47] + "..."
                          changed.append(f"- `{path}`: `{old_val}` â†’ `{new_val}`")
                      summary.extend(changed)
                  
                  # Knowledge graph changes need special attention
                  kg_changes = False
                  if "knowledge_graph_summary" in head and "knowledge_graph_summary" in base:
                      if head["knowledge_graph_summary"].get("concept_count") != base["knowledge_graph_summary"].get("concept_count"):
                          kg_changes = True
                          old_count = base["knowledge_graph_summary"].get("concept_count", 0)
                          new_count = head["knowledge_graph_summary"].get("concept_count", 0)
                          delta = new_count - old_count
                          if delta > 0:
                              summary.append(f"### ðŸ§© Knowledge Graph: +{delta} concepts")
                          else:
                              summary.append(f"### ðŸ§© Knowledge Graph: {delta} concepts")
                  
                  # Generate final markdown output
                  with open("context_diff.md", "w") as f:
                      f.write("# Context Delta Summary\n\n")
                      f.write("Changes detected in `.khora/context.yaml`:\n\n")
                      f.write("\n".join(summary))
                      f.write("\n\n---\n")
                      f.write("> These changes may affect AI partner understanding of your project. [Learn more](https://github.com/your-org/khora-kernel)")
                  
                  # Set has_changes flag for GitHub actions
                  print("Setting has_changes=true")
              else:
                  # No meaningful differences
                  with open("context_diff.md", "w") as f:
                      f.write("# Context Delta: No Significant Changes\n\n")
                      f.write("The structure of `.khora/context.yaml` remains consistent, only timestamps or other non-semantic elements changed.\n")
                  
                  # Set has_changes flag for GitHub actions
                  print("Setting has_changes=false")
                  
          except Exception as e:
              # Handle errors (file not found, invalid YAML, etc.)
              with open("context_diff.md", "w") as f:
                  f.write(f"# Context Delta: Error\n\n")
                  f.write(f"An error occurred while comparing context files: {str(e)}\n")
              
              # Set error flag for GitHub actions
              print("Setting has_error=true")
          ' || echo "Failed to generate diff"
          
          # Create output variables for the next steps
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Store the diff content for the next step
          cat context_diff.md
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              const diffContent = fs.readFileSync('context_diff.md', 'utf8');
              
              // If no significant changes, don't add a comment
              if (!diffContent.includes('No Significant Changes') && !diffContent.includes('Error')) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: diffContent
                });
                console.log('Posted context diff comment to PR');
              } else {
                console.log('No significant changes to comment on');
              }
            } catch (error) {
              console.error('Error posting comment:', error);
            }
