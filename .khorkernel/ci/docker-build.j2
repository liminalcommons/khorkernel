# Khora Kernel - Docker Build Workflow (Generated from docker-build.j2)
# Builds and optionally pushes Docker images for API and Worker services.
name: Docker Build

on:
  push:
    branches: [ main ] # Push images only on merge to main
  pull_request:
    branches: [ main ] # Build images on PRs to check Dockerfiles

jobs:
  build-docker-images:
    runs-on: ubuntu-latest
    # Grant permissions for pushing to GHCR or other registries if needed
    # permissions:
    #   contents: read
    #   packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Add login step if pushing to a registry (e.g., Docker Hub, GHCR)
      # - name: Log in to Docker Hub
      #   if: github.event_name == 'push'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      #
      # - name: Log in to GitHub Container Registry
      #   if: github.event_name == 'push'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define Image Tags
        id: tags
        run: |
          # Use commit SHA for specific tag, 'latest' for main branch push
          IMAGE_TAG=${GITHUB_SHA::7}
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            IMAGE_TAG=latest
          fi
          # Replace with your registry prefix if needed (e.g., ghcr.io/${{ github.repository_owner }})
          REGISTRY_PREFIX="${{ secrets.DOCKER_REGISTRY_PREFIX || '' }}" # Example: set secret or leave empty for Docker Hub default
          if [[ -n "$REGISTRY_PREFIX" ]]; then
            REGISTRY_PREFIX="$REGISTRY_PREFIX/"
          fi
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "api_image_name=${REGISTRY_PREFIX}{{ project }}-api" >> $GITHUB_OUTPUT
          echo "worker_image_name=${REGISTRY_PREFIX}{{ project }}-worker" >> $GITHUB_OUTPUT

      - name: Build and Push API Image
        uses: docker/build-push-action@v5
        with:
          context: {{ (paths.api_dir | default('src/app/api')).replace('\\', '/') }}
          # Assume Dockerfile is at the root of the context dir
          # file: {{ (paths.api_dir | default('src/app/api')).replace('\\', '/') }}/Dockerfile
          push: ${{ github.event_name == 'push' }} # Only push on merge to main
          tags: ${{ steps.tags.outputs.api_image_name }}:${{ steps.tags.outputs.tag }}
          # Cache settings with scope per image type
          cache-from: type=gha,scope=api-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=api-${{ github.ref_name }}

      - name: Build and Push Worker Image
        # Only run if worker_dir is defined and different from api_dir, or always if needed
        # if: "'{{ paths.worker_dir }}' != '' && '{{ paths.worker_dir }}' != '{{ paths.api_dir }}'"
        uses: docker/build-push-action@v5
        with:
          context: {{ (paths.worker_dir | default('src/app/worker')).replace('\\', '/') }}
          # file: {{ (paths.worker_dir | default('src/app/worker')).replace('\\', '/') }}/Dockerfile
          push: ${{ github.event_name == 'push' }} # Only push on merge to main
          tags: ${{ steps.tags.outputs.worker_image_name }}:${{ steps.tags.outputs.tag }}
          # Cache settings with scope per image type
          cache-from: type=gha,scope=worker-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=worker-${{ github.ref_name }}