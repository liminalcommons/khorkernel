# Khora Kernel - Pre-commit Hook Configuration v1.0.2
# Defines hooks run automatically before each commit. Requires `pre-commit install`.
# See https://pre-commit.com/ for more information
# See https://github.com/pre-commit/pre-commit-hooks for more hooks

repos:
  # --- Standard Python Formatting & Basic Checks ---
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0 # Use a recent, stable version
    hooks:
      - id: check-yaml           # Checks yaml files for parseable syntax.
      - id: end-of-file-fixer    # Ensures files end in a newline.
      - id: trailing-whitespace  # Trims trailing whitespace.
      - id: check-added-large-files # Prevent giant files from being committed.

  # --- Code Formatting ---
  - repo: https://github.com/psf/black
    rev: 24.4.2 # Use a recent, stable version
    hooks:
      - id: black
        # language_version: python3 # Specify if needed

  # --- Linting & Style Enforcement ---
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.9 # Use a recent, stable version
    hooks:
      - id: ruff # Runs linter
        args: [--fix] # Auto-fix where possible
      - id: ruff-format # Use ruff's formatter (can replace black if preferred)
        # If using ruff-format instead of black, remove the black repo above.

  # --- Security Scanning ---
  - repo: https://github.com/trufflesecurity/trufflehog
    rev: v3.77.1 # Use a recent, stable version
    hooks:
      - id: trufflehog
        name: TruffleHog (Scan for secrets)
        args: [--fail, --exclude-paths=.khorkernel/trufflehog-excludes.txt] # Exclude known false positives

{% if features.security_gates %}
  # Bandit can be noisy in pre-commit; often better suited for CI.
  # Uncomment if you want it here.
  # - repo: https://github.com/PyCQA/bandit
  #   rev: 1.7.9 # Use a recent, stable version
  #   hooks:
  #     - id: bandit
  #       name: Bandit (Scan for common security issues)
  #       args: ["-c", "pyproject.toml"] # Optional: Use config file
  #       # Exclude test directories if needed: --exclude=./tests
{% endif %}

  # --- Type Checking (Optional, can be slow) ---
  # Uncomment if you want MyPy in pre-commit. Often better in CI.
  # - repo: https://github.com/pre-commit/mirrors-mypy
  #   rev: v1.10.0 # Use a recent, stable version
  #   hooks:
  #     - id: mypy
  #       name: MyPy (Static type checking)
  #       args: [--ignore-missing-imports]
  #       # Specify paths to check if needed: files: ^src/

  # --- Khora Kernel Specific Hooks ---
  - repo: local
    hooks:
      - id: populate-kg
        name: Populate Knowledge Graph
        entry: python .khorkernel/scripts/populate_kg.py
        language: python
        types: [markdown] # Run only when markdown files change
        pass_filenames: false # Script scans directories itself
        always_run: true # Run on every commit to ensure KG is up-to-date

      - id: generate-context
        name: Generate Context YAML
        entry: python .khorkernel/scripts/gen_context.py
        language: python
        files: ^(\.khorkernel/KERNEL_MANIFEST\.yaml|kg/(concepts|rules)\.json)$ # Run on manifest or KG changes
        pass_filenames: false
        # always_run: false # Only run when relevant inputs change

      - id: validate-context
        name: Validate Context Schema
        entry: |
          python -c "import json, jsonschema, yaml, sys; 
          try:
            ctx = yaml.safe_load(open('.khora/context.yaml'));
            schema = json.load(open('.khorkernel/schema/context_schema.json'));
            jsonschema.validate(ctx, schema);
            print('✅ Context schema validation successful');
            sys.exit(0);
          except Exception as e:
            print(f'❌ Error validating context: {e}');
            sys.exit(1);"
        language: python
        files: ^\.khora/context\.yaml$ # Run when context.yaml changes
        pass_filenames: false