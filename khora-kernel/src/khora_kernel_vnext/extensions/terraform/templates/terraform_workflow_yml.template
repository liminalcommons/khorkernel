name: Terraform IaC for ${project_name}

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'infra/terraform/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'infra/terraform/**'
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        cli_config_credentials_token: $${{{ secrets.TF_API_TOKEN }}

    - name: Format check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
      working-directory: infra/terraform

    - name: Initialize Terraform
      id: init
      run: terraform init -backend=false
      working-directory: infra/terraform
      
    - name: Validate Terraform
      id: validate
      run: terraform validate -no-color
      working-directory: infra/terraform

    - name: Run tfsec security scanner
      uses: tfsec/tfsec-sarif-action@v0.1.4
      with:
        working_directory: infra/terraform
        sarif_file: tfsec.sarif

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec.sarif
        
    - name: Comment on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: $${{{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`$${{{ steps.fmt.outcome }}}\`
          #### Terraform Initialization ‚öôÔ∏è\`$${{{ steps.init.outcome }}}\`
          #### Terraform Validation ü§ñ\`$${{{ steps.validate.outcome }}}\`
          
          <details><summary>Validation Output</summary>
          
          \`\`\`
          $${{{ steps.validate.outputs.stdout }}}
          \`\`\`
          
          </details>
          
          *Pushed by: @$${{{ github.actor }}}, Action: \`$${{{ github.event_name }}}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan-dev:
    name: Terraform Plan (Dev)
    runs-on: ubuntu-latest
    needs: terraform-validation
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        cli_config_credentials_token: $${{{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: infra/terraform/environments/dev
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      working-directory: infra/terraform/environments/dev
      
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: $${{{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan for Dev Environment üìù\`$${{{ steps.plan.outcome }}}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          $${{{ steps.plan.outputs.stdout }}}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  # Uncomment if you want to apply changes automatically (be careful!)
  # terraform-apply:
  #   name: Terraform Apply
  #   runs-on: ubuntu-latest
  #   needs: [terraform-validation, terraform-plan-dev]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #     
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2
  #     with:
  #       terraform_version: 1.5.0
  #       cli_config_credentials_token: $${{{ secrets.TF_API_TOKEN }}
  #
  #   - name: Terraform Init
  #     run: terraform init
  #     working-directory: infra/terraform/environments/dev
  #     
  #   - name: Terraform Apply
  #     run: terraform apply -auto-approve
  #     working-directory: infra/terraform/environments/dev
